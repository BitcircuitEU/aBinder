name: Release Build

on:
  push:
    branches:
      - main

# Add permissions block
permissions:
  contents: write
  packages: write
  
jobs:
  build-and-release:
    runs-on: windows-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Read version
      id: version
      shell: pwsh
      run: |
        $version = Get-Content VERSION.md -Raw
        $version = $version.Trim()
        echo "version=$version" >> $env:GITHUB_OUTPUT
        echo "Version found: $version"
    
    - name: Install Qt
      uses: jurplel/install-qt-action@v3
      with:
        version: '6.8.1'
        host: 'windows'
        target: 'desktop'
        arch: 'win64_msvc2022_64'
        tools: 'tools_cmake'
        modules: 'qtwebsockets qtnetworkauth'
        
    - name: Install OpenSSL
      shell: pwsh
      run: |
        choco install openssl -y
        echo "OPENSSL_ROOT_DIR=C:/Program Files/OpenSSL" >> $env:GITHUB_ENV
        echo "OPENSSL_LIBRARIES=C:/Program Files/OpenSSL/lib" >> $env:GITHUB_ENV
        
    - name: Setup MSVC
      uses: ilammy/msvc-dev-cmd@v1
      with:
        arch: x64
        
    - name: Create Build Directory
      run: mkdir client/build
      
    - name: Configure CMake
      working-directory: client/build
      shell: pwsh
      run: |
        echo "Qt6_DIR: $env:Qt6_DIR"
        cmake .. -DCMAKE_BUILD_TYPE=Release -DOPENSSL_ROOT_DIR="$env:OPENSSL_ROOT_DIR" -DOPENSSL_LIBRARIES="$env:OPENSSL_LIBRARIES"
      
    - name: Build
      working-directory: client/build
      run: cmake --build . --config Release

    - name: Install Windows SDK
      shell: pwsh
      run: |
        choco install windows-sdk-10-version-2004-all -y

    - name: Copy Dependencies
      working-directory: client/build/Release
      shell: pwsh
      run: |
        # Create temp directory for release files
        New-Item -ItemType Directory -Path "release_files" -Force
        
        # Copy exe to release directory
        Copy-Item "aBinder.exe" "release_files/"
        
        # Set Qt bin to PATH for windeployqt
        $Env:PATH = "$env:Qt6_DIR\bin;$Env:PATH"
        
        # Copy OpenSSL DLLs to release directory
        Copy-Item "C:/Program Files/OpenSSL/bin/libssl-3-x64.dll" "release_files/"
        Copy-Item "C:/Program Files/OpenSSL/bin/libcrypto-3-x64.dll" "release_files/"
        
        # Run windeployqt on the exe in the release directory
        Push-Location "release_files"
        windeployqt.exe --release --no-translations --no-system-d3d-compiler --no-opengl-sw aBinder.exe
        Pop-Location

    - name: Setup Code Signing
      working-directory: client/build/Release
      shell: pwsh
      run: |
        function Setup-CodeSigning {
            param (
                [Parameter(Mandatory=$true)]
                [string]$CertificatePassword,
                [Parameter(Mandatory=$true)]
                [string]$FilePath
            )
            
            Write-Host "=== Starte Code-Signing Prozess ==="
            
            try {
                # Zertifikat erstellen
                Write-Host "Erstelle Code-Signing Zertifikat..."
                $cert = New-SelfSignedCertificate `
                    -Type Custom `
                    -Subject "CN=aBinder, O=Bitcircuit, L=Berlin, S=Berlin, C=DE" `
                    -KeyUsage DigitalSignature `
                    -FriendlyName "aBinder Certificate" `
                    -CertStoreLocation "Cert:\CurrentUser\My" `
                    -TextExtension @("2.5.29.37={text}1.3.6.1.5.5.7.3.3", "2.5.29.19={text}") `
                    -KeyExportPolicy Exportable `
                    -KeySpec Signature `
                    -KeyLength 2048 `
                    -KeyAlgorithm RSA `
                    -HashAlgorithm SHA256 `
                    -NotAfter (Get-Date).AddYears(5)
                
                # Zertifikat exportieren
                Write-Host "Exportiere Zertifikat..."
                $certPath = "certificate.pfx"
                $securePassword = ConvertTo-SecureString -String $CertificatePassword -Force -AsPlainText
                Export-PfxCertificate -Cert $cert -FilePath $certPath -Password $securePassword
                
                # Zertifikat importieren
                Write-Host "Importiere Zertifikat..."
                Import-PfxCertificate -FilePath $certPath -CertStoreLocation Cert:\CurrentUser\My -Password $securePassword
                
                # Überprüfe ob die Datei existiert
                if (-not (Test-Path $FilePath)) {
                    throw "Die zu signierende Datei wurde nicht gefunden: $FilePath"
                }
                
                # Signiere die Anwendung
                Write-Host "Signiere Anwendung..."
                $result = Set-AuthenticodeSignature `
                    -FilePath $FilePath `
                    -Certificate $cert `
                    -TimestampServer "http://timestamp.sectigo.com" `
                    -HashAlgorithm SHA256
                
                # Überprüfe das Ergebnis
                Write-Host "Signatur-Status: $($result.Status)"
                if ($result.Status -ne "Valid") {
                    throw "Signierung fehlgeschlagen: $($result.StatusMessage)"
                }
                
                Write-Host "=== Code-Signing erfolgreich abgeschlossen ==="
                return $true
            }
            catch {
                Write-Host "=== FEHLER beim Code-Signing ===" -ForegroundColor Red
                Write-Host $_.Exception.Message -ForegroundColor Red
                return $false
            }
            finally {
                # Aufräumen
                if (Test-Path $certPath) {
                    Remove-Item $certPath -Force
                }
            }
        }
        
        # Führe Code-Signing aus
        $success = Setup-CodeSigning `
            -CertificatePassword "${{ secrets.CERTIFICATE_PASSWORD }}" `
            -FilePath "release_files/aBinder.exe"
            
        if (-not $success) {
            exit 1
        }
        
    - name: Packing Files
      working-directory: client/build/Release
      shell: pwsh
      run: |          
        # Create ZIP file with version number (only from release_files directory)
        $version = Get-Content ../../../VERSION.md -Raw
        $version = $version.Trim()
        Compress-Archive -Path "release_files/*" -DestinationPath "../aBinder_$version.zip" -Force  
        
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ steps.version.outputs.version }}
        release_name: aBinder v${{ steps.version.outputs.version }}
        draft: false
        prerelease: false
        
    - name: Upload Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: client/build/aBinder_${{ steps.version.outputs.version }}.zip
        asset_name: aBinder_${{ steps.version.outputs.version }}.zip
        asset_content_type: application/zip 